"./resources/node.vis" asFileContents evaluate;
"extendnode.vis" fileExists ifTrue: ["extendnode.vis" asFileContents evaluate];

!visionUrl <- "http://localhost:9300/vision/api";

!schemaQuery <- "./resources/schema.vis" asFileContents;
!holdingsQuery <- "./resources/holdings.vis" asFileContents;

!externalURL <- "https://catalog.data.gov/harvest/object/fab71ee0-1f0f-4f5f-806c-788342f56d8c";

################################################################################
####  External Object Servers
JS defineMethod: [ | server: address | ^self object: address xo ];
String define: "xo" toBePrimitive: 8;                        # by network address
String define: "xd" toBePrimitive: 8 withControlValue: 1;    # by directory entry

################################################################################
####  'fetch' covers
JS defineMethod: [ | fetch: query from: url |
   ^self object: (
      ^self jsObject fetch: query jsParam from: url
   )
];

JS defineMethod: [ | fetchText: query from: url |
   ^self object: (
      ^self jsObject fetchText: query jsParam from: url
   )
];

JS defineMethod: [ | fetchJSON: query from: url |
   ^self object: (
      ^self jsObject fetchJSON: query jsParam from: url
   )
];

################
JS defineMethod: [ | fetchFrom: url withOptions: options |
   ^self object: (
      ^self jsObject fetchFrom: url withOptions: options jsParam
   )
];

JS defineMethod: [ | fetchTextFrom: url withOptions: options |
   ^self object: (
      ^self jsObject fetchTextFrom: url withOptions: options jsParam
   )
];

JS defineMethod: [ | fetchJSONFrom: url withOptions: options |
   ^self object: (
      ^self jsObject fetchJSONFrom: url withOptions: options jsParam
   )
];

################################################################################
####  'fetch' examples

!fs <- JS server: "localhost:2300";
!body <- fs newObject
   set: "expression" to: holdingsQuery.
   set: "classId"    to: "Account".
   set: "id"         to: "SP50";

!r1 <- fs fetchJSON: body from: visionUrl;

!options <- fs newObject
  set: "method"  to: "post".
  set: "headers" to: (body newObject set: "Content-Type" to: "application/json").
  set: "body"    to: (body global get: [JSON stringify: ^my body jsParam]).

